using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using onbe.logging.attributes;
using System;
using System.ComponentModel.DataAnnotations;
using System.Globalization;

namespace dii_MovieCatalogSvc.Data
{
    // Note that much of this code was generated by https://app.quicktype.io/?l=csharp

    /// <summary>
    /// Information about a movie.
    /// Can be instantiated from JSON data obtained at http://omdbapi.com/ like this:
    /// 
    ///    var movieMetadata = MovieMetadata.FromJson(jsonString);
    /// 
    /// </summary>

    public partial class MovieMetadata
    {
        [JsonIgnore]
        public Guid MovieMetadataId { get; set; }

        [JsonProperty("Title")]
        [Required]
        public string Title { get; set; }

        [JsonProperty("imdbID")]
        [MaxLength(32)]
        [LogMasked(ShowLast = 4, Text = "X")]
        public string ImdbId { get; set; }

        [JsonProperty("Year")]
        [NotLogged]
        public string Year { get; set; }

        [JsonProperty("Rated")]
        [NotLogged]
        public string Rated { get; set; }

        [JsonProperty("Released")]
        [NotLogged]
        public string Released { get; set; }

        [JsonProperty("Runtime")]
        [NotLogged]
        public string Runtime { get; set; }

        [JsonProperty("Genre")]
        [NotLogged]
        public string Genre { get; set; }

        [JsonProperty("Director")]
        [NotLogged]
        public string Director { get; set; }

        [JsonProperty("Writer")]
        [NotLogged]
        public string Writer { get; set; }

        [JsonProperty("Actors")]
        [NotLogged]
        public string Actors { get; set; }

        [JsonProperty("Plot")]
        [NotLogged]
        public string Plot { get; set; }

        [JsonProperty("Language")]
        [NotLogged]
        public string Language { get; set; }

        [JsonProperty("Country")]
        [NotLogged]
        public string Country { get; set; }

        [JsonProperty("Awards")]
        [NotLogged]
        public string Awards { get; set; }

        [JsonProperty("Poster")]
        [NotLogged]
        public Uri Poster { get; set; }

        // Note that we removed the Ratings array because it was too complicated to make work with EF Core.

        [JsonProperty("Metascore")]
        [NotLogged]
        public string Metascore { get; set; }

        [JsonProperty("imdbRating")]
        public string ImdbRating { get; set; }

        [JsonProperty("imdbVotes")]
        public string ImdbVotes { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("totalSeasons")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TotalSeasons { get; set; }

        [JsonProperty("Response")]
        public string Response { get; set; }
    }

    public partial class MovieMetadata
    {
        public static MovieMetadata FromJson(string json) => JsonConvert.DeserializeObject<MovieMetadata>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MovieMetadata self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
